from fpdf import FPDF
import os
import base64
from datetime import datetime

class PDF(FPDF):
    def header(self):
        # Logo
        try:
            self.image('logo.png', 10, 8, 25)
        except:
            # If logo fails to load, continue without it
            pass
        # Arial bold 15
        self.set_font('Arial', 'B', 15)
        # Move to the right
        self.cell(80)
        # Title
        self.cell(30, 10, 'EchoMind - Chat Analysis Report', 0, 0, 'C')
        # Line break
        self.ln(20)

    def footer(self):
        # Position at 1.5 cm from bottom
        self.set_y(-15)
        # Arial italic 8
        self.set_font('Arial', 'I', 8)
        # Page number
        self.cell(0, 10, f'Page {self.page_no()}/{{nb}}', 0, 0, 'C')

def create_pdf_report(df, selected_user, num_messages, words, num_media_messages, num_links):
    """
    Create a PDF report from the analysis data
    
    Args:
        df: DataFrame containing chat data
        selected_user: User selected for analysis
        num_messages: Total number of messages
        words: Total number of words
        num_media_messages: Number of media messages
        num_links: Number of links shared
        
    Returns:
        BytesIO: PDF buffer
    """
    from io import BytesIO
    
    pdf = PDF()
    pdf.alias_nb_pages()
    pdf.add_page()
    
    # Set font for the title
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 10, 'EchoMind - Chat Analysis Report', 0, 1, 'C')
    pdf.ln(10)
    
    # Add analysis date and user info
    pdf.set_font('Arial', 'I', 10)
    pdf.cell(0, 10, f'Generated on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', 0, 1, 'R')
    pdf.cell(0, 10, f'Analysis for: {selected_user}', 0, 1, 'R')
    pdf.ln(5)
    
    # Calculate additional statistics
    total_days = (df['date'].max() - df['date'].min()).days + 1 if len(df) > 0 else 0
    avg_messages_per_day = num_messages / total_days if total_days > 0 else 0
    avg_words_per_message = words / num_messages if num_messages > 0 else 0
    media_ratio = (num_media_messages/num_messages*100) if num_messages > 0 else 0
    
    # Add basic statistics
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 10, 'Basic Statistics', 0, 1)
    pdf.set_font('Arial', '', 10)
    
    # Create a table for statistics
    col_width = pdf.w / 2.5
    row_height = pdf.font_size * 2
    
    stats = [
        ['Total Messages', f'{num_messages:,}'],
        ['Total Words', f'{words:,}'],
        ['Media Shared', f'{num_media_messages:,}'],
        ['Links Shared', f'{num_links:,}'],
        ['Total Days', f'{total_days}'],
        ['Avg Messages/Day', f'{avg_messages_per_day:.1f}'],
        ['Avg Words/Message', f'{avg_words_per_message:.1f}'],
        ['Media Ratio', f'{media_ratio:.1f}%'],
    ]
    
    for row in stats:
        pdf.cell(col_width, row_height, str(row[0]), border=1)
        pdf.cell(col_width, row_height, str(row[1]), border=1)
        pdf.ln(row_height)
    
    # Add analysis sections
    pdf.add_page()
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 10, 'Analysis Details', 0, 1)
    pdf.set_font('Arial', '', 10)
    
    # Add project information
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 10, 'Project Information', 0, 1)
    pdf.set_font('Arial', '', 10)
    pdf.cell(0, 10, 'EchoMind - Decoding Conversations with Machine Learning', 0, 1)
    pdf.cell(0, 10, 'Developed by: Satyam Govind Yadav & Arunkumar Gupta', 0, 1)
    pdf.ln(5)
    
    # Add insights section
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 10, 'Key Insights', 0, 1)
    pdf.set_font('Arial', '', 10)
    
    insights = []
    if avg_messages_per_day > 50:
        insights.append("High daily message activity detected")
    if media_ratio > 20:
        insights.append("High media sharing activity")
    if avg_words_per_message > 10:
        insights.append("Detailed conversations with longer messages")
    if total_days > 30:
        insights.append("Long-term conversation analysis")
    
    if insights:
        for insight in insights:
            pdf.cell(0, 10, f'- {insight}', 0, 1)
    else:
        pdf.cell(0, 10, '- Standard conversation patterns observed', 0, 1)
    
    # Add footer
    pdf.add_page()
    pdf.set_font('Arial', 'I', 8)
    pdf.cell(0, 10, 'Report generated by EchoMind - Advanced Conversation Analysis Platform', 0, 1, 'C')
    pdf.cell(0, 10, 'Made with love by Satyam Govind Yadav & Arunkumar Gupta', 0, 1, 'C')
    
    # Return PDF as BytesIO buffer
    buffer = BytesIO()
    pdf.output(buffer, 'S')
    buffer.seek(0)
    return buffer

def get_binary_file_downloader_html(bin_file, file_label='File'):
    """
    Generates a link to download a file
    """
    with open(bin_file, 'rb') as f:
        data = f.read()
    bin_str = base64.b64encode(data).decode()
    href = f'<a href="data:application/octet-stream;base64,{bin_str}" download="{os.path.basename(bin_file)}">Download {file_label}</a>'
    return href
